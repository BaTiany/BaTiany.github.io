<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clearlove&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-24T07:42:26.439Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Massif</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo和GitHub Page 搭建个人博客</title>
    <link href="http://yoursite.com/2019/06/22/Hexo%E5%92%8CGitHub-Page-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/06/22/Hexo和GitHub-Page-搭建个人博客/</id>
    <published>2019-06-22T09:04:30.000Z</published>
    <updated>2019-06-24T07:42:26.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人博客的搭建"><a href="#个人博客的搭建" class="headerlink" title="个人博客的搭建"></a>个人博客的搭建</h1><a id="more"></a><hr><h3 id="1-nbsp-nbsp-搭建环境"><a href="#1-nbsp-nbsp-搭建环境" class="headerlink" title="1.&nbsp;&nbsp;搭建环境"></a>1.&nbsp;&nbsp;搭建环境</h3><ul><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js 下载并安装</a></li><li><a href="https://github.com/" target="_blank" rel="noopener">github</a> (没账号注册一个账号)</li></ul><hr><h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2 . 安装hexo"></a>2 . 安装hexo</h3><p>  2.1  安装Hexo，在命令行（即Git Bash）运行以下命令：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p> 2.2 创建一个文件夹为项目文件夹，然后在此目录下打开git bash执行以下命令初始化Hexo<br>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><p>  2.3 会生成一系列文件，在站点下启动服务，执行命令如下<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server  (可简写为  hexo s)</span><br></pre></td></tr></table></figure></p><p>  2.4 浏览器访问网址 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>  博客在本地已搭建完成。</p><hr><h3 id="3-与远程关联，这里我使用的是GitHubPages"><a href="#3-与远程关联，这里我使用的是GitHubPages" class="headerlink" title="3 . 与远程关联，这里我使用的是GitHubPages"></a>3 . 与远程关联，这里我使用的是<code>GitHubPages</code></h3><ul><li><p>注册一个GitHub账号</p></li><li><p>创建一个仓库，仓库名为&lt;GitHub账号名&gt;.github.io</p><p><img src="./img/img01.png" alt><br><img src="./img/img02.png" alt></p></li><li><p>创建完成后，打开设置找到GitHub Pages</p><p><img src="./img/img03.png" alt><br><img src="./img/img04.png" alt></p></li><li><p>随便一个主题，反正后面都会覆盖</p></li><li><p>将本地Hexo博客推送到GithubPages</p><ol><li>安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>  注：上面仓库地址是ssh地址，需要生成一个ssh秘钥，参考：<a href="https://www.jianshu.com/p/f92ed1ca8120" target="_blank" rel="noopener">https://www.jianshu.com/p/f92ed1ca8120</a></p></li><li><p>最后下面三行执行命令</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>  博客已经部署到了远程，通过 https://&lt;Github账号名称&gt;.github.io 即可访问</p></li></ul><hr><h3 id="4-博客搭建完成，但是默认主题不好看，可以去下载一些主题"><a href="#4-博客搭建完成，但是默认主题不好看，可以去下载一些主题" class="headerlink" title="4. 博客搭建完成，但是默认主题不好看，可以去下载一些主题"></a>4. 博客搭建完成，但是默认主题不好看，可以去下载一些主题</h3><p>  <a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">Theme选择主题并且clone</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;个人博客的搭建&quot;&gt;&lt;a href=&quot;#个人博客的搭建&quot; class=&quot;headerlink&quot; title=&quot;个人博客的搭建&quot;&gt;&lt;/a&gt;个人博客的搭建&lt;/h1&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>关于React</title>
    <link href="http://yoursite.com/2019/06/22/%E5%85%B3%E4%BA%8EReact/"/>
    <id>http://yoursite.com/2019/06/22/关于React/</id>
    <published>2019-06-22T09:03:46.000Z</published>
    <updated>2019-06-24T07:36:16.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于React"><a href="#关于React" class="headerlink" title="关于React"></a>关于React</h1><a id="more"></a><h2 id="React的起源和发展"><a href="#React的起源和发展" class="headerlink" title="React的起源和发展"></a>React的起源和发展</h2><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。</p><h2 id="React与传统MVC的关系"><a href="#React与传统MVC的关系" class="headerlink" title="React与传统MVC的关系"></a>React与传统MVC的关系</h2><p>轻量级的视图层<strong>库</strong>！<em>A JavaScript library for building user interfaces</em></p><p>React不是一个完整的MVC框架，最多可以认为是MVC中的V（View），甚至React并不非常认可MVC开发模式；React 构建页面 UI 的库。可以简单地理解为，React 将将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p><h2 id="React高性能的体现：虚拟DOM"><a href="#React高性能的体现：虚拟DOM" class="headerlink" title="React高性能的体现：虚拟DOM"></a>React高性能的体现：虚拟DOM</h2><h5 id="React高性能的原理："><a href="#React高性能的原理：" class="headerlink" title="React高性能的原理："></a>React高性能的原理：</h5><p>在Web开发中我们总需要将变化的数据实时反应到UI上，这时就需要对DOM进行操作。而复杂或频繁的DOM操作通常是性能瓶颈产生的原因（如何进行高性能的复杂DOM操作通常是衡量一个前端开发人员技能的重要指标）。</p><p>React为此引入了虚拟DOM（Virtual DOM）的机制：在浏览器端用Javascript实现了一套DOM API。基于React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。而且React能够批处理虚拟DOM的刷新，在一个事件循环（Event Loop）内的多次数据变化会被合并，例如你连续的先将节点内容从A-B,B-A，React会认为A变成B，然后又从B变成A  UI不发生任何变化，而如果通过手动控制，这种逻辑通常是极其复杂的。</p><p>尽管每一次都需要构造完整的虚拟DOM树，但是因为虚拟DOM是内存数据，性能是极高的，部而对实际DOM进行操作的仅仅是Diff部分，因而能达到提高性能的目的。这样，在保证性能的同时，开发者将不再需要关注某个数据的变化如何更新到一个或多个具体的DOM元素，而只需要关心在任意一个数据状态下，整个界面是如何Render的。</p><h5 id="React-Fiber"><a href="#React-Fiber" class="headerlink" title="React Fiber:"></a>React Fiber:</h5><p>在react 16之后发布的一种react 核心算法，<strong>React Fiber是对核心算法的一次重新实现</strong>(官网说法)。之前用的是diff算法。</p><p>在之前React中，更新过程是同步的，这可能会导致性能问题。</p><p>当React决定要加载或者更新组件树时，会做很多事，比如调用各个组件的生命周期函数，计算和比对Virtual DOM，最后更新DOM树，这整个过程是同步进行的，也就是说只要一个加载或者更新过程开始，中途不会中断。因为JavaScript单线程的特点，如果组件树很大的时候，每个同步任务耗时太长，就会出现卡顿。</p><p>React Fiber的方法其实很简单——分片。把一个耗时长的任务分成很多小片，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都给其他任务一个执行的机会，这样唯一的线程就不会被独占，其他任务依然有运行的机会。</p><h2 id="React的特点和优势"><a href="#React的特点和优势" class="headerlink" title="React的特点和优势"></a>React的特点和优势</h2><ol><li>虚拟DOM</li></ol><p>我们以前操作dom的方式是通过document.getElementById()的方式，这样的过程实际上是先去读取html的dom结构，将结构转换成变量，再进行操作</p><p>而reactjs定义了一套变量形式的dom模型，一切操作和换算直接在变量中，这样减少了操作真实dom，性能真实相当的高，和主流MVC框架有本质的区别，并不和dom打交道</p><ol start="2"><li>组件系统</li></ol><p>react最核心的思想是将页面中任何一个区域或者元素都可以看做一个组件 component</p><p>那么什么是组件呢？</p><p>组件指的就是同时包含了html、css、js、image元素的聚合体</p><p>使用react开发的核心就是将页面拆分成若干个组件，并且react一个组件中同时耦合了css、js、image，这种模式整个颠覆了过去的传统的方式</p><ol start="3"><li>单向数据流</li></ol><p>其实reactjs的核心内容就是数据绑定，所谓数据绑定指的是只要将一些服务端的数据和前端页面绑定好，开发者只关注实现业务就行了</p><ol start="4"><li>JSX  语法</li></ol><p>在vue中，我们使用render函数来构建组件的dom结构性能较高，因为省去了查找和编译模板的过程，但是在render中利用createElement创建结构的时候代码可读性较低，较为复杂，此时可以利用jsx语法来在render中创建dom，解决这个问题，但是前提是需要使用工具来编译jsx</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于React&quot;&gt;&lt;a href=&quot;#关于React&quot; class=&quot;headerlink&quot; title=&quot;关于React&quot;&gt;&lt;/a&gt;关于React&lt;/h1&gt;
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="React 学习" scheme="http://yoursite.com/tags/React-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
