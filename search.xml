<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo和GitHub Page 搭建个人博客]]></title>
    <url>%2F2019%2F06%2F22%2FHexo%E5%92%8CGitHub-Page-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[个人博客的搭建 1.&nbsp;&nbsp;搭建环境 Node.js 下载并安装 github (没账号注册一个账号) 2 . 安装hexo 2.1 安装Hexo，在命令行（即Git Bash）运行以下命令： npm install -g hexo-cli 2.2 创建一个文件夹为项目文件夹，然后在此目录下打开git bash执行以下命令初始化Hexo hexo init 2.3 会生成一系列文件，在站点下启动服务，执行命令如下 hexo server 2.4 浏览器访问网址 http://localhost:4000 博客在本地已搭建完成。 3 . 与远程关联，这里我使用的是GitHubPages 注册一个GitHub账号 创建一个仓库，仓库名为&lt;GitHub账号名&gt;.github.io 创建完成后，打开设置找到GitHub Pages 随便一个主题，反正后面都会覆盖 将本地Hexo博客推送到GithubPages 安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可： npm install hexo-deployer-git –save 修改_config.yml（在站点目录下）。文件末尾修改为： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master 注：上面仓库地址是ssh地址，需要生成一个ssh秘钥，参考：https://www.jianshu.com/p/f92ed1ca8120 最后下面三行执行命令 123$ hexo clean$ hexo g$ hexo d 博客已经部署到了远程，通过 https://&lt;Github账号名称&gt;.github.io 即可访问 4. 博客搭建完成，但是默认主题不好看，可以去下载一些主题 Theme 在此可以clone主题]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于React]]></title>
    <url>%2F2019%2F06%2F22%2F%E5%85%B3%E4%BA%8EReact%2F</url>
    <content type="text"><![CDATA[关于ReactReact的起源和发展React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。 React与传统MVC的关系轻量级的视图层库！A JavaScript library for building user interfaces React不是一个完整的MVC框架，最多可以认为是MVC中的V（View），甚至React并不非常认可MVC开发模式；React 构建页面 UI 的库。可以简单地理解为，React 将将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。 React高性能的体现：虚拟DOM#####React高性能的原理： 在Web开发中我们总需要将变化的数据实时反应到UI上，这时就需要对DOM进行操作。而复杂或频繁的DOM操作通常是性能瓶颈产生的原因（如何进行高性能的复杂DOM操作通常是衡量一个前端开发人员技能的重要指标）。 React为此引入了虚拟DOM（Virtual DOM）的机制：在浏览器端用Javascript实现了一套DOM API。基于React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。而且React能够批处理虚拟DOM的刷新，在一个事件循环（Event Loop）内的多次数据变化会被合并，例如你连续的先将节点内容从A-B,B-A，React会认为A变成B，然后又从B变成A UI不发生任何变化，而如果通过手动控制，这种逻辑通常是极其复杂的。 尽管每一次都需要构造完整的虚拟DOM树，但是因为虚拟DOM是内存数据，性能是极高的，部而对实际DOM进行操作的仅仅是Diff部分，因而能达到提高性能的目的。这样，在保证性能的同时，开发者将不再需要关注某个数据的变化如何更新到一个或多个具体的DOM元素，而只需要关心在任意一个数据状态下，整个界面是如何Render的。 #####React Fiber: 在react 16之后发布的一种react 核心算法，React Fiber是对核心算法的一次重新实现(官网说法)。之前用的是diff算法。 在之前React中，更新过程是同步的，这可能会导致性能问题。 当React决定要加载或者更新组件树时，会做很多事，比如调用各个组件的生命周期函数，计算和比对Virtual DOM，最后更新DOM树，这整个过程是同步进行的，也就是说只要一个加载或者更新过程开始，中途不会中断。因为JavaScript单线程的特点，如果组件树很大的时候，每个同步任务耗时太长，就会出现卡顿。 React Fiber的方法其实很简单——分片。把一个耗时长的任务分成很多小片，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都给其他任务一个执行的机会，这样唯一的线程就不会被独占，其他任务依然有运行的机会。 React的特点和优势 虚拟DOM 我们以前操作dom的方式是通过document.getElementById()的方式，这样的过程实际上是先去读取html的dom结构，将结构转换成变量，再进行操作 而reactjs定义了一套变量形式的dom模型，一切操作和换算直接在变量中，这样减少了操作真实dom，性能真实相当的高，和主流MVC框架有本质的区别，并不和dom打交道 组件系统 react最核心的思想是将页面中任何一个区域或者元素都可以看做一个组件 component 那么什么是组件呢？ 组件指的就是同时包含了html、css、js、image元素的聚合体 使用react开发的核心就是将页面拆分成若干个组件，并且react一个组件中同时耦合了css、js、image，这种模式整个颠覆了过去的传统的方式 单向数据流 其实reactjs的核心内容就是数据绑定，所谓数据绑定指的是只要将一些服务端的数据和前端页面绑定好，开发者只关注实现业务就行了 JSX 语法 在vue中，我们使用render函数来构建组件的dom结构性能较高，因为省去了查找和编译模板的过程，但是在render中利用createElement创建结构的时候代码可读性较低，较为复杂，此时可以利用jsx语法来在render中创建dom，解决这个问题，但是前提是需要使用工具来编译jsx]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>React 学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
